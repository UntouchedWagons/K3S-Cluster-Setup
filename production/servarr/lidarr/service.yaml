---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: lidarr
  namespace: servarr
  labels:
    app: lidarr
spec:
  replicas: 1
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 0
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: lidarr
  template:
    metadata:
      labels:
        app: lidarr
    spec:
      securityContext:
        fsGroup: 568
      initContainers:
        - name: init-db
          image: ghcr.io/onedr0p/postgres-init:15.5
          env:
            - name: INIT_POSTGRES_HOST
              value: "postgresql-cluster-rw.database.svc.cluster.local"
            - name: INIT_POSTGRES_USER
              value: "lidarr"
            - name: INIT_POSTGRES_PASS
              value: "DespoticPubProprietySavour"
            - name: INIT_POSTGRES_DBNAME
              value: "lidarr-main lidarr-logs"
            - name: INIT_POSTGRES_SUPER_PASS
              value: "TrembleBulwarkBeautifulGossip"
        - name: restore
          image: untouchedwagons/simple-restore:1.0.4
          volumeMounts:
            - mountPath: /data
              name: lidarr-config
            - mountPath: /backups
              name: backups
          env:
            - name: BACKUP_APPEND_DIRECTORY
              value: "/kubernetes/production/lidarr"
            - name: BACKUP_BASE_NAME
              value: "lidarr"
      containers:
        - name: lidarr
          image: ghcr.io/onedr0p/lidarr:2.1.7
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
              add: ['CHOWN', 'FOWNER', 'SETGID', 'SETUID']
          env:
            - name: LIDARR__API_KEY
              value: "1555da6d78404bffb22c90ace2b31b31"
            - name: LIDARR__AUTHENTICATION_METHOD
              value: "None"
            - name: LIDARR__AUTHENTICATION_REQUIRED
              value: "DisabledForLocalAddresses"
            - name: LIDARR__POSTGRES_HOST
              value: "postgresql-cluster-rw.database.svc.cluster.local"
            - name: LIDARR__POSTGRES_MAIN_DB
              value: "lidarr-main"
            - name: LIDARR__POSTGRES_LOG_DB
              value: "lidarr-logs"
            - name: LIDARR__POSTGRES_USER
              value: "lidarr"
            - name: LIDARR__POSTGRES_PASSWORD
              value: "DespoticPubProprietySavour"
          resources:
            limits:
              memory: 1Gi
              cpu: "4"
            requests:
              memory: 512Mi
              cpu: "1"
          volumeMounts:
            - mountPath: /config
              name: lidarr-config
            - mountPath: /mnt/data/Music
              name: music
            - mountPath: /mnt/data/Torrents
              name: torrents
            - mountPath: /mnt/data/Usenet
              name: usenet
        - name: backup
          image: untouchedwagons/simple-backup:1.0.5
          resources:
            limits:
              memory: 256Mi
              cpu: "1"
            requests:
              memory: 128Mi
              cpu: "0.2"
          volumeMounts:
            - mountPath: /data
              name: lidarr-config
            - mountPath: /backups
              name: backups
          env:
            - name: BACKUP_APPEND_DIRECTORY
              value: "/kubernetes/production/lidarr"
            - name: BACKUP_BASE_NAME
              value: "lidarr"
            - name: BACKUP_RETENTION
              value: "24"
            - name: BACKUP_FREQUENCY
              value: "0 0 * * *"

      volumes:
        - name: lidarr-config
          persistentVolumeClaim:
            claimName: lidarr-config
        - name: backups
          nfs:
            server: 192.168.35.30
            path: /mnt/tank/Media/Backups
        - name: music
          nfs:
            server: 192.168.35.30
            path: /mnt/tank/Media/Music
        - name: torrents
          nfs:
            server: 192.168.35.30
            path: /mnt/tank/Media/Torrents
        - name: usenet
          nfs:
            server: 192.168.35.30
            path: /mnt/tank/Media/Usenet
---
apiVersion: v1
kind: Service
metadata:
  name: lidarr
  namespace: servarr
spec:
  selector:
    app: lidarr
  ports:
    - name: http
      targetPort: 8686
      port: 8686
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lidarr
  namespace: servarr
  annotations:
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/redirect-entry-point: https
spec:
  rules:
  - host: lidarr.services.untouchedwagons.com
    http:
      paths:
      - backend:
          service:
            name: lidarr
            port:
              number: 8686
        path: /
        pathType: Prefix
  tls:
    - hosts: 
      - untouchedwagons.com
      secretName: com-untouchedwagons-services
